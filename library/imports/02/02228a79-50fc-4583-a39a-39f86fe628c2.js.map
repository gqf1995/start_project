{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "AAAA,EAAE,CAAC,KAAK,CAAC;AACL,eAAS,EAAE,CAAC,SAAS;;AAErB,cAAU,EAAE;;;AAGP,kBAAU,EAAE,EAAE;;AAEd,YAAI,EAAE;AACH,uBAAS,IAAI;AACb,wBAAY,EAAE,KAAK;SACtB;KACJ;;AAGD,UAAM,EAAE,kBAAY;AACf,YAAI,CAAC,OAAO,GAAG,KAAK,CAAC;AACrB,UAAE,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;KAC1B;;AAED,QAAI,EAAE,cAAU,CAAC,EAAE;AACf,UAAE,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;AACpB,YAAI,CAAC,IAAI,GAAG,CAAC,CAAC;AACd,YAAI,CAAC,OAAO,GAAG,IAAI,CAAC;;AAEpB,YAAI,CAAC,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC;KAC3B;;AAED,SAAK,EAAC,eAAC,IAAI,EAAE;AACT,YAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACnB;;AAED,qBAAiB,EAAE,6BAAY;;;AAG3B,YAAI,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;AACpD,UAAE,CAAC,GAAG,CAAC,wBAAwB,GAAC,SAAS,CAAC,CAAC,CAAC,CAAC;;AAE7C,YAAI,IAAI,GAAG,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;;AAEvD,eAAO,IAAI,CAAC;KACf;;AAED,YAAQ,EAAE,oBAAW;AAChB,UAAE,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;AACzB,YAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;;AAElC,YAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;;AAEzB,YAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACpC;;;;;AAKD,UAAM,EAAE,gBAAU,EAAE,EAAE;AAClB,UAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;;AAEb,YAAI,YAAY,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,GAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC;AAC9D,YAAI,UAAU,GAAG,EAAE,CAAC;;AAEpB,YAAI,CAAC,IAAI,CAAC,OAAO,GAAG,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,IAAI,GAAG,GAAG,UAAU,CAAA,AAAC,CAAC,CAAC;;AAE/E,YAAI,IAAI,CAAC,iBAAiB,EAAE,GAAG,IAAI,CAAC,UAAU,EAAE;;AAE5C,gBAAI,CAAC,QAAQ,EAAE,CAAC;AAChB,mBAAO;SACV,MAAI,EAEJ;KAEJ;;CAEJ,CAAC,CAAC",
  "file": "unknown",
  "sourcesContent": [
    "cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        \r\n        //碰撞距离\r\n         pickRadius: 60,\r\n         //游戏对象\r\n         game: {\r\n            default: null,\r\n            serializable: false\r\n        }\r\n    },\r\n\r\n    \r\n    onLoad: function () {\r\n         this.enabled = false;\r\n         cc.log(\"star:onLoad\");\r\n    },\r\n    //加载游戏对象\r\n    init: function (g) {\r\n        cc.log(\"star:init\");\r\n        this.game = g;\r\n        this.enabled = true;\r\n        //设置透明度\r\n        this.node.opacity = 255;\r\n    },\r\n    \r\n    reuse (game) {\r\n        this.init(game);\r\n    },\r\n    \r\n    getPlayerDistance: function () {\r\n        \r\n        // 根据 player 节点位置判断距离\r\n        var playerPos = this.game.player.node.getPosition();\r\n        cc.log(\"star:getPlayerDistance\"+playerPos.x);\r\n        // 根据两点位置计算两点之间距离\r\n        var dist = cc.pDistance(this.node.position, playerPos);\r\n       \r\n        return dist;\r\n    },\r\n\r\n    onPicked: function() {\r\n         cc.log(\"star:onPicked\");\r\n        var pos = this.node.getPosition();\r\n        // 调用 Game 脚本的得分方法\r\n        this.game.gainScore(pos);\r\n        // 当星星被收集时，调用 Game 脚本中的接口，销毁当前星星节点，生成一个新的星星\r\n        this.game.despawnStar(this.node);\r\n    },\r\n    // called every frame, uncomment this function to activate update callback\r\n    // update: function (dt) {\r\n\r\n    // },\r\n    update: function (dt) {\r\n        cc.log(\"21\");\r\n         // 根据 Game 脚本中的计时器更新星星的透明度\r\n        var opacityRatio = 1 - this.game.timer/this.game.starDuration;\r\n        var minOpacity = 50;\r\n        //设置透明度\r\n        this.node.opacity = minOpacity + Math.floor(opacityRatio * (255 - minOpacity));\r\n        // 每帧判断和主角之间的距离是否小于收集距离\r\n        if (this.getPlayerDistance() < this.pickRadius) {\r\n            // 调用收集行为\r\n            this.onPicked();\r\n            return;\r\n        }else{\r\n            \r\n        }\r\n        \r\n    },\r\n    \r\n});\r\n"
  ]
}